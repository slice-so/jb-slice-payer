/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type JBSplitStruct = {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumberish;
  projectId: BigNumberish;
  beneficiary: string;
  lockedUntil: BigNumberish;
  allocator: string;
};

export type JBSplitStructOutput = [
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumber;
  projectId: BigNumber;
  beneficiary: string;
  lockedUntil: BigNumber;
  allocator: string;
};

export type JBGroupedSplitsStruct = {
  group: BigNumberish;
  splits: JBSplitStruct[];
};

export type JBGroupedSplitsStructOutput = [BigNumber, JBSplitStructOutput[]] & {
  group: BigNumber;
  splits: JBSplitStructOutput[];
};

export interface IJBSplitsStoreInterface extends utils.Interface {
  contractName: "IJBSplitsStore";
  functions: {
    "directory()": FunctionFragment;
    "projects()": FunctionFragment;
    "set(uint256,uint256,(uint256,(bool,bool,uint256,uint256,address,uint256,address)[])[])": FunctionFragment;
    "splitsOf(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "directory", values?: undefined): string;
  encodeFunctionData(functionFragment: "projects", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, JBGroupedSplitsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "splitsOf",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "directory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "splitsOf", data: BytesLike): Result;

  events: {
    "SetSplit(uint256,uint256,uint256,tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetSplit"): EventFragment;
}

export type SetSplitEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, JBSplitStructOutput, string],
  {
    projectId: BigNumber;
    domain: BigNumber;
    group: BigNumber;
    split: JBSplitStructOutput;
    caller: string;
  }
>;

export type SetSplitEventFilter = TypedEventFilter<SetSplitEvent>;

export interface IJBSplitsStore extends BaseContract {
  contractName: "IJBSplitsStore";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IJBSplitsStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    directory(overrides?: CallOverrides): Promise<[string]>;

    projects(overrides?: CallOverrides): Promise<[string]>;

    set(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    splitsOf(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _group: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[JBSplitStructOutput[]]>;
  };

  directory(overrides?: CallOverrides): Promise<string>;

  projects(overrides?: CallOverrides): Promise<string>;

  set(
    _projectId: BigNumberish,
    _domain: BigNumberish,
    _groupedSplits: JBGroupedSplitsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  splitsOf(
    _projectId: BigNumberish,
    _domain: BigNumberish,
    _group: BigNumberish,
    overrides?: CallOverrides
  ): Promise<JBSplitStructOutput[]>;

  callStatic: {
    directory(overrides?: CallOverrides): Promise<string>;

    projects(overrides?: CallOverrides): Promise<string>;

    set(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    splitsOf(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _group: BigNumberish,
      overrides?: CallOverrides
    ): Promise<JBSplitStructOutput[]>;
  };

  filters: {
    "SetSplit(uint256,uint256,uint256,tuple,address)"(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      split?: null,
      caller?: null
    ): SetSplitEventFilter;
    SetSplit(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      split?: null,
      caller?: null
    ): SetSplitEventFilter;
  };

  estimateGas: {
    directory(overrides?: CallOverrides): Promise<BigNumber>;

    projects(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    splitsOf(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _group: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    directory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    splitsOf(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _group: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
