/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface JBOperationsInterface extends utils.Interface {
  contractName: "JBOperations";
  functions: {
    "BURN()": FunctionFragment;
    "CHANGE_TOKEN()": FunctionFragment;
    "CLAIM()": FunctionFragment;
    "ISSUE()": FunctionFragment;
    "MIGRATE_CONTROLLER()": FunctionFragment;
    "MIGRATE_TERMINAL()": FunctionFragment;
    "MINT()": FunctionFragment;
    "PROCESS_FEES()": FunctionFragment;
    "RECONFIGURE()": FunctionFragment;
    "REDEEM()": FunctionFragment;
    "REQUIRE_CLAIM()": FunctionFragment;
    "SET_CONTROLLER()": FunctionFragment;
    "SET_METADATA()": FunctionFragment;
    "SET_PRIMARY_TERMINAL()": FunctionFragment;
    "SET_SPLITS()": FunctionFragment;
    "SET_TERMINALS()": FunctionFragment;
    "TRANSFER()": FunctionFragment;
    "USE_ALLOWANCE()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BURN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CHANGE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CLAIM", values?: undefined): string;
  encodeFunctionData(functionFragment: "ISSUE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIGRATE_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIGRATE_TERMINAL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MINT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PROCESS_FEES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RECONFIGURE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "REDEEM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REQUIRE_CLAIM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_METADATA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_PRIMARY_TERMINAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_SPLITS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_TERMINALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TRANSFER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "USE_ALLOWANCE",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BURN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CHANGE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CLAIM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ISSUE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIGRATE_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIGRATE_TERMINAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MINT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PROCESS_FEES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RECONFIGURE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "REDEEM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REQUIRE_CLAIM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_METADATA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_PRIMARY_TERMINAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SET_SPLITS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SET_TERMINALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TRANSFER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "USE_ALLOWANCE",
    data: BytesLike
  ): Result;

  events: {};
}

export interface JBOperations extends BaseContract {
  contractName: "JBOperations";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JBOperationsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BURN(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHANGE_TOKEN(overrides?: CallOverrides): Promise<[BigNumber]>;

    CLAIM(overrides?: CallOverrides): Promise<[BigNumber]>;

    ISSUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIGRATE_CONTROLLER(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIGRATE_TERMINAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROCESS_FEES(overrides?: CallOverrides): Promise<[BigNumber]>;

    RECONFIGURE(overrides?: CallOverrides): Promise<[BigNumber]>;

    REDEEM(overrides?: CallOverrides): Promise<[BigNumber]>;

    REQUIRE_CLAIM(overrides?: CallOverrides): Promise<[BigNumber]>;

    SET_CONTROLLER(overrides?: CallOverrides): Promise<[BigNumber]>;

    SET_METADATA(overrides?: CallOverrides): Promise<[BigNumber]>;

    SET_PRIMARY_TERMINAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    SET_SPLITS(overrides?: CallOverrides): Promise<[BigNumber]>;

    SET_TERMINALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TRANSFER(overrides?: CallOverrides): Promise<[BigNumber]>;

    USE_ALLOWANCE(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BURN(overrides?: CallOverrides): Promise<BigNumber>;

  CHANGE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

  CLAIM(overrides?: CallOverrides): Promise<BigNumber>;

  ISSUE(overrides?: CallOverrides): Promise<BigNumber>;

  MIGRATE_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

  MIGRATE_TERMINAL(overrides?: CallOverrides): Promise<BigNumber>;

  MINT(overrides?: CallOverrides): Promise<BigNumber>;

  PROCESS_FEES(overrides?: CallOverrides): Promise<BigNumber>;

  RECONFIGURE(overrides?: CallOverrides): Promise<BigNumber>;

  REDEEM(overrides?: CallOverrides): Promise<BigNumber>;

  REQUIRE_CLAIM(overrides?: CallOverrides): Promise<BigNumber>;

  SET_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

  SET_METADATA(overrides?: CallOverrides): Promise<BigNumber>;

  SET_PRIMARY_TERMINAL(overrides?: CallOverrides): Promise<BigNumber>;

  SET_SPLITS(overrides?: CallOverrides): Promise<BigNumber>;

  SET_TERMINALS(overrides?: CallOverrides): Promise<BigNumber>;

  TRANSFER(overrides?: CallOverrides): Promise<BigNumber>;

  USE_ALLOWANCE(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BURN(overrides?: CallOverrides): Promise<BigNumber>;

    CHANGE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    CLAIM(overrides?: CallOverrides): Promise<BigNumber>;

    ISSUE(overrides?: CallOverrides): Promise<BigNumber>;

    MIGRATE_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    MIGRATE_TERMINAL(overrides?: CallOverrides): Promise<BigNumber>;

    MINT(overrides?: CallOverrides): Promise<BigNumber>;

    PROCESS_FEES(overrides?: CallOverrides): Promise<BigNumber>;

    RECONFIGURE(overrides?: CallOverrides): Promise<BigNumber>;

    REDEEM(overrides?: CallOverrides): Promise<BigNumber>;

    REQUIRE_CLAIM(overrides?: CallOverrides): Promise<BigNumber>;

    SET_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    SET_METADATA(overrides?: CallOverrides): Promise<BigNumber>;

    SET_PRIMARY_TERMINAL(overrides?: CallOverrides): Promise<BigNumber>;

    SET_SPLITS(overrides?: CallOverrides): Promise<BigNumber>;

    SET_TERMINALS(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER(overrides?: CallOverrides): Promise<BigNumber>;

    USE_ALLOWANCE(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    BURN(overrides?: CallOverrides): Promise<BigNumber>;

    CHANGE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    CLAIM(overrides?: CallOverrides): Promise<BigNumber>;

    ISSUE(overrides?: CallOverrides): Promise<BigNumber>;

    MIGRATE_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    MIGRATE_TERMINAL(overrides?: CallOverrides): Promise<BigNumber>;

    MINT(overrides?: CallOverrides): Promise<BigNumber>;

    PROCESS_FEES(overrides?: CallOverrides): Promise<BigNumber>;

    RECONFIGURE(overrides?: CallOverrides): Promise<BigNumber>;

    REDEEM(overrides?: CallOverrides): Promise<BigNumber>;

    REQUIRE_CLAIM(overrides?: CallOverrides): Promise<BigNumber>;

    SET_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    SET_METADATA(overrides?: CallOverrides): Promise<BigNumber>;

    SET_PRIMARY_TERMINAL(overrides?: CallOverrides): Promise<BigNumber>;

    SET_SPLITS(overrides?: CallOverrides): Promise<BigNumber>;

    SET_TERMINALS(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER(overrides?: CallOverrides): Promise<BigNumber>;

    USE_ALLOWANCE(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BURN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CHANGE_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CLAIM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ISSUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIGRATE_CONTROLLER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIGRATE_TERMINAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROCESS_FEES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RECONFIGURE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REDEEM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REQUIRE_CLAIM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SET_CONTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SET_METADATA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SET_PRIMARY_TERMINAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SET_SPLITS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SET_TERMINALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRANSFER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USE_ALLOWANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
