/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IJBProjectPayerInterface extends utils.Interface {
  contractName: "IJBProjectPayer";
  functions: {
    "addToBalanceOf(uint256,address,uint256,uint256,string,bytes)": FunctionFragment;
    "defaultBeneficiary()": FunctionFragment;
    "defaultMemo()": FunctionFragment;
    "defaultMetadata()": FunctionFragment;
    "defaultPreferAddToBalance()": FunctionFragment;
    "defaultPreferClaimedTokens()": FunctionFragment;
    "defaultProjectId()": FunctionFragment;
    "directory()": FunctionFragment;
    "pay(uint256,address,uint256,uint256,address,uint256,bool,string,bytes)": FunctionFragment;
    "setDefaultValues(uint256,address,bool,string,bytes,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addToBalanceOf",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMemo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPreferAddToBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPreferClaimedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultProjectId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "directory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultValues",
    values: [BigNumberish, string, boolean, string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMemo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultPreferAddToBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultPreferClaimedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultProjectId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "directory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "SetDefaultValues(uint256,address,bool,string,bytes,bool,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetDefaultValues"): EventFragment;
}

export type SetDefaultValuesEvent = TypedEvent<
  [BigNumber, string, boolean, string, string, boolean, string],
  {
    projectId: BigNumber;
    beneficiary: string;
    preferClaimedTokens: boolean;
    memo: string;
    metadata: string;
    preferAddToBalance: boolean;
    caller: string;
  }
>;

export type SetDefaultValuesEventFilter =
  TypedEventFilter<SetDefaultValuesEvent>;

export interface IJBProjectPayer extends BaseContract {
  contractName: "IJBProjectPayer";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IJBProjectPayerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToBalanceOf(
      _projectId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _decimals: BigNumberish,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    defaultMemo(overrides?: CallOverrides): Promise<[string]>;

    defaultMetadata(overrides?: CallOverrides): Promise<[string]>;

    defaultPreferAddToBalance(overrides?: CallOverrides): Promise<[boolean]>;

    defaultPreferClaimedTokens(overrides?: CallOverrides): Promise<[boolean]>;

    defaultProjectId(overrides?: CallOverrides): Promise<[BigNumber]>;

    directory(overrides?: CallOverrides): Promise<[string]>;

    pay(
      _projectId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _decimals: BigNumberish,
      _beneficiary: string,
      _minReturnedTokens: BigNumberish,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultValues(
      _projectId: BigNumberish,
      _beneficiary: string,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      _defaultPreferAddToBalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addToBalanceOf(
    _projectId: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    _decimals: BigNumberish,
    _memo: string,
    _metadata: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultBeneficiary(overrides?: CallOverrides): Promise<string>;

  defaultMemo(overrides?: CallOverrides): Promise<string>;

  defaultMetadata(overrides?: CallOverrides): Promise<string>;

  defaultPreferAddToBalance(overrides?: CallOverrides): Promise<boolean>;

  defaultPreferClaimedTokens(overrides?: CallOverrides): Promise<boolean>;

  defaultProjectId(overrides?: CallOverrides): Promise<BigNumber>;

  directory(overrides?: CallOverrides): Promise<string>;

  pay(
    _projectId: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    _decimals: BigNumberish,
    _beneficiary: string,
    _minReturnedTokens: BigNumberish,
    _preferClaimedTokens: boolean,
    _memo: string,
    _metadata: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultValues(
    _projectId: BigNumberish,
    _beneficiary: string,
    _preferClaimedTokens: boolean,
    _memo: string,
    _metadata: BytesLike,
    _defaultPreferAddToBalance: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addToBalanceOf(
      _projectId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _decimals: BigNumberish,
      _memo: string,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultBeneficiary(overrides?: CallOverrides): Promise<string>;

    defaultMemo(overrides?: CallOverrides): Promise<string>;

    defaultMetadata(overrides?: CallOverrides): Promise<string>;

    defaultPreferAddToBalance(overrides?: CallOverrides): Promise<boolean>;

    defaultPreferClaimedTokens(overrides?: CallOverrides): Promise<boolean>;

    defaultProjectId(overrides?: CallOverrides): Promise<BigNumber>;

    directory(overrides?: CallOverrides): Promise<string>;

    pay(
      _projectId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _decimals: BigNumberish,
      _beneficiary: string,
      _minReturnedTokens: BigNumberish,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultValues(
      _projectId: BigNumberish,
      _beneficiary: string,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      _defaultPreferAddToBalance: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "SetDefaultValues(uint256,address,bool,string,bytes,bool,address)"(
      projectId?: BigNumberish | null,
      beneficiary?: string | null,
      preferClaimedTokens?: null,
      memo?: null,
      metadata?: null,
      preferAddToBalance?: null,
      caller?: null
    ): SetDefaultValuesEventFilter;
    SetDefaultValues(
      projectId?: BigNumberish | null,
      beneficiary?: string | null,
      preferClaimedTokens?: null,
      memo?: null,
      metadata?: null,
      preferAddToBalance?: null,
      caller?: null
    ): SetDefaultValuesEventFilter;
  };

  estimateGas: {
    addToBalanceOf(
      _projectId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _decimals: BigNumberish,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    defaultMemo(overrides?: CallOverrides): Promise<BigNumber>;

    defaultMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    defaultPreferAddToBalance(overrides?: CallOverrides): Promise<BigNumber>;

    defaultPreferClaimedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    defaultProjectId(overrides?: CallOverrides): Promise<BigNumber>;

    directory(overrides?: CallOverrides): Promise<BigNumber>;

    pay(
      _projectId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _decimals: BigNumberish,
      _beneficiary: string,
      _minReturnedTokens: BigNumberish,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultValues(
      _projectId: BigNumberish,
      _beneficiary: string,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      _defaultPreferAddToBalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToBalanceOf(
      _projectId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _decimals: BigNumberish,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultBeneficiary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultMemo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultMetadata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultPreferAddToBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultPreferClaimedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultProjectId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    directory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pay(
      _projectId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _decimals: BigNumberish,
      _beneficiary: string,
      _minReturnedTokens: BigNumberish,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultValues(
      _projectId: BigNumberish,
      _beneficiary: string,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      _defaultPreferAddToBalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
