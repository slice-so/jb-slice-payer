/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type JBSplitStruct = {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumberish;
  projectId: BigNumberish;
  beneficiary: string;
  lockedUntil: BigNumberish;
  allocator: string;
};

export type JBSplitStructOutput = [
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumber;
  projectId: BigNumber;
  beneficiary: string;
  lockedUntil: BigNumber;
  allocator: string;
};

export type JBSplitAllocationDataStruct = {
  token: string;
  amount: BigNumberish;
  decimals: BigNumberish;
  projectId: BigNumberish;
  group: BigNumberish;
  split: JBSplitStruct;
};

export type JBSplitAllocationDataStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  JBSplitStructOutput
] & {
  token: string;
  amount: BigNumber;
  decimals: BigNumber;
  projectId: BigNumber;
  group: BigNumber;
  split: JBSplitStructOutput;
};

export interface IJBSplitAllocatorInterface extends utils.Interface {
  contractName: "IJBSplitAllocator";
  functions: {
    "allocate((address,uint256,uint256,uint256,uint256,(bool,bool,uint256,uint256,address,uint256,address)))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocate",
    values: [JBSplitAllocationDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IJBSplitAllocator extends BaseContract {
  contractName: "IJBSplitAllocator";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IJBSplitAllocatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allocate(
      _data: JBSplitAllocationDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  allocate(
    _data: JBSplitAllocationDataStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    allocate(
      _data: JBSplitAllocationDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    allocate(
      _data: JBSplitAllocationDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocate(
      _data: JBSplitAllocationDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
