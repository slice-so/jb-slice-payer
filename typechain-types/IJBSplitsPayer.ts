/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type JBSplitStruct = {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumberish;
  projectId: BigNumberish;
  beneficiary: string;
  lockedUntil: BigNumberish;
  allocator: string;
};

export type JBSplitStructOutput = [
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumber;
  projectId: BigNumber;
  beneficiary: string;
  lockedUntil: BigNumber;
  allocator: string;
};

export interface IJBSplitsPayerInterface extends utils.Interface {
  contractName: "IJBSplitsPayer";
  functions: {
    "defaultSplitsDomain()": FunctionFragment;
    "defaultSplitsGroup()": FunctionFragment;
    "defaultSplitsProjectId()": FunctionFragment;
    "setDefaultSplits(uint256,uint256,uint256)": FunctionFragment;
    "splitsStore()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "defaultSplitsDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSplitsGroup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSplitsProjectId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultSplits",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "splitsStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "defaultSplitsDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSplitsGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSplitsProjectId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitsStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "AddToBalance(uint256,address,address,uint256,uint256,uint256,string,bytes,address)": EventFragment;
    "DistributeToSplit(uint256,uint256,uint256,tuple,uint256,address,address)": EventFragment;
    "Pay(uint256,address,address,uint256,uint256,uint256,uint256,bool,string,bytes,address)": EventFragment;
    "SetDefaultSplits(uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddToBalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeToSplit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDefaultSplits"): EventFragment;
}

export type AddToBalanceEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ],
  {
    projectId: BigNumber;
    beneficiary: string;
    token: string;
    amount: BigNumber;
    decimals: BigNumber;
    leftoverAmount: BigNumber;
    memo: string;
    metadata: string;
    caller: string;
  }
>;

export type AddToBalanceEventFilter = TypedEventFilter<AddToBalanceEvent>;

export type DistributeToSplitEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    JBSplitStructOutput,
    BigNumber,
    string,
    string
  ],
  {
    projectId: BigNumber;
    domain: BigNumber;
    group: BigNumber;
    split: JBSplitStructOutput;
    amount: BigNumber;
    defaultBeneficiary: string;
    caller: string;
  }
>;

export type DistributeToSplitEventFilter =
  TypedEventFilter<DistributeToSplitEvent>;

export type PayEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string,
    string,
    string
  ],
  {
    projectId: BigNumber;
    beneficiary: string;
    token: string;
    amount: BigNumber;
    decimals: BigNumber;
    leftoverAmount: BigNumber;
    minReturnedTokens: BigNumber;
    preferClaimedTokens: boolean;
    memo: string;
    metadata: string;
    caller: string;
  }
>;

export type PayEventFilter = TypedEventFilter<PayEvent>;

export type SetDefaultSplitsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  { projectId: BigNumber; domain: BigNumber; group: BigNumber; caller: string }
>;

export type SetDefaultSplitsEventFilter =
  TypedEventFilter<SetDefaultSplitsEvent>;

export interface IJBSplitsPayer extends BaseContract {
  contractName: "IJBSplitsPayer";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IJBSplitsPayerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    defaultSplitsDomain(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultSplitsGroup(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultSplitsProjectId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDefaultSplits(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _group: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    splitsStore(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  defaultSplitsDomain(overrides?: CallOverrides): Promise<BigNumber>;

  defaultSplitsGroup(overrides?: CallOverrides): Promise<BigNumber>;

  defaultSplitsProjectId(overrides?: CallOverrides): Promise<BigNumber>;

  setDefaultSplits(
    _projectId: BigNumberish,
    _domain: BigNumberish,
    _group: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  splitsStore(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    defaultSplitsDomain(overrides?: CallOverrides): Promise<BigNumber>;

    defaultSplitsGroup(overrides?: CallOverrides): Promise<BigNumber>;

    defaultSplitsProjectId(overrides?: CallOverrides): Promise<BigNumber>;

    setDefaultSplits(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _group: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    splitsStore(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddToBalance(uint256,address,address,uint256,uint256,uint256,string,bytes,address)"(
      projectId?: BigNumberish | null,
      beneficiary?: null,
      token?: null,
      amount?: null,
      decimals?: null,
      leftoverAmount?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): AddToBalanceEventFilter;
    AddToBalance(
      projectId?: BigNumberish | null,
      beneficiary?: null,
      token?: null,
      amount?: null,
      decimals?: null,
      leftoverAmount?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): AddToBalanceEventFilter;

    "DistributeToSplit(uint256,uint256,uint256,tuple,uint256,address,address)"(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      split?: null,
      amount?: null,
      defaultBeneficiary?: null,
      caller?: null
    ): DistributeToSplitEventFilter;
    DistributeToSplit(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      split?: null,
      amount?: null,
      defaultBeneficiary?: null,
      caller?: null
    ): DistributeToSplitEventFilter;

    "Pay(uint256,address,address,uint256,uint256,uint256,uint256,bool,string,bytes,address)"(
      projectId?: BigNumberish | null,
      beneficiary?: null,
      token?: null,
      amount?: null,
      decimals?: null,
      leftoverAmount?: null,
      minReturnedTokens?: null,
      preferClaimedTokens?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): PayEventFilter;
    Pay(
      projectId?: BigNumberish | null,
      beneficiary?: null,
      token?: null,
      amount?: null,
      decimals?: null,
      leftoverAmount?: null,
      minReturnedTokens?: null,
      preferClaimedTokens?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): PayEventFilter;

    "SetDefaultSplits(uint256,uint256,uint256,address)"(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      caller?: null
    ): SetDefaultSplitsEventFilter;
    SetDefaultSplits(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      caller?: null
    ): SetDefaultSplitsEventFilter;
  };

  estimateGas: {
    defaultSplitsDomain(overrides?: CallOverrides): Promise<BigNumber>;

    defaultSplitsGroup(overrides?: CallOverrides): Promise<BigNumber>;

    defaultSplitsProjectId(overrides?: CallOverrides): Promise<BigNumber>;

    setDefaultSplits(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _group: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    splitsStore(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    defaultSplitsDomain(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultSplitsGroup(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultSplitsProjectId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDefaultSplits(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _group: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    splitsStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
