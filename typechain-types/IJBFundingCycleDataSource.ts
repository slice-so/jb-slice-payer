/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type JBTokenAmountStruct = {
  token: string;
  value: BigNumberish;
  decimals: BigNumberish;
  currency: BigNumberish;
};

export type JBTokenAmountStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  token: string;
  value: BigNumber;
  decimals: BigNumber;
  currency: BigNumber;
};

export type JBPayParamsDataStruct = {
  terminal: string;
  payer: string;
  amount: JBTokenAmountStruct;
  projectId: BigNumberish;
  currentFundingCycleConfiguration: BigNumberish;
  beneficiary: string;
  weight: BigNumberish;
  reservedRate: BigNumberish;
  memo: string;
  metadata: BytesLike;
};

export type JBPayParamsDataStructOutput = [
  string,
  string,
  JBTokenAmountStructOutput,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  terminal: string;
  payer: string;
  amount: JBTokenAmountStructOutput;
  projectId: BigNumber;
  currentFundingCycleConfiguration: BigNumber;
  beneficiary: string;
  weight: BigNumber;
  reservedRate: BigNumber;
  memo: string;
  metadata: string;
};

export type JBRedeemParamsDataStruct = {
  terminal: string;
  holder: string;
  projectId: BigNumberish;
  currentFundingCycleConfiguration: BigNumberish;
  tokenCount: BigNumberish;
  totalSupply: BigNumberish;
  overflow: BigNumberish;
  reclaimAmount: JBTokenAmountStruct;
  useTotalOverflow: boolean;
  redemptionRate: BigNumberish;
  ballotRedemptionRate: BigNumberish;
  memo: string;
  metadata: BytesLike;
};

export type JBRedeemParamsDataStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  JBTokenAmountStructOutput,
  boolean,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  terminal: string;
  holder: string;
  projectId: BigNumber;
  currentFundingCycleConfiguration: BigNumber;
  tokenCount: BigNumber;
  totalSupply: BigNumber;
  overflow: BigNumber;
  reclaimAmount: JBTokenAmountStructOutput;
  useTotalOverflow: boolean;
  redemptionRate: BigNumber;
  ballotRedemptionRate: BigNumber;
  memo: string;
  metadata: string;
};

export interface IJBFundingCycleDataSourceInterface extends utils.Interface {
  contractName: "IJBFundingCycleDataSource";
  functions: {
    "payParams((address,address,(address,uint256,uint256,uint256),uint256,uint256,address,uint256,uint256,string,bytes))": FunctionFragment;
    "redeemParams((address,address,uint256,uint256,uint256,uint256,uint256,(address,uint256,uint256,uint256),bool,uint256,uint256,string,bytes))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "payParams",
    values: [JBPayParamsDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemParams",
    values: [JBRedeemParamsDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "payParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IJBFundingCycleDataSource extends BaseContract {
  contractName: "IJBFundingCycleDataSource";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IJBFundingCycleDataSourceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    payParams(
      _data: JBPayParamsDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemParams(
      _data: JBRedeemParamsDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  payParams(
    _data: JBPayParamsDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemParams(
    _data: JBRedeemParamsDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    payParams(
      _data: JBPayParamsDataStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        weight: BigNumber;
        memo: string;
        delegate: string;
      }
    >;

    redeemParams(
      _data: JBRedeemParamsDataStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        reclaimAmount: BigNumber;
        memo: string;
        delegate: string;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    payParams(
      _data: JBPayParamsDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemParams(
      _data: JBRedeemParamsDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    payParams(
      _data: JBPayParamsDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemParams(
      _data: JBRedeemParamsDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
