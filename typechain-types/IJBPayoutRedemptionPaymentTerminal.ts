/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type JBTokenAmountStruct = {
  token: string;
  value: BigNumberish;
  decimals: BigNumberish;
  currency: BigNumberish;
};

export type JBTokenAmountStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  token: string;
  value: BigNumber;
  decimals: BigNumber;
  currency: BigNumber;
};

export type JBDidPayDataStruct = {
  payer: string;
  projectId: BigNumberish;
  currentFundingCycleConfiguration: BigNumberish;
  amount: JBTokenAmountStruct;
  projectTokenCount: BigNumberish;
  beneficiary: string;
  preferClaimedTokens: boolean;
  memo: string;
  metadata: BytesLike;
};

export type JBDidPayDataStructOutput = [
  string,
  BigNumber,
  BigNumber,
  JBTokenAmountStructOutput,
  BigNumber,
  string,
  boolean,
  string,
  string
] & {
  payer: string;
  projectId: BigNumber;
  currentFundingCycleConfiguration: BigNumber;
  amount: JBTokenAmountStructOutput;
  projectTokenCount: BigNumber;
  beneficiary: string;
  preferClaimedTokens: boolean;
  memo: string;
  metadata: string;
};

export type JBDidRedeemDataStruct = {
  holder: string;
  projectId: BigNumberish;
  currentFundingCycleConfiguration: BigNumberish;
  projectTokenCount: BigNumberish;
  reclaimedAmount: JBTokenAmountStruct;
  beneficiary: string;
  memo: string;
  metadata: BytesLike;
};

export type JBDidRedeemDataStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  JBTokenAmountStructOutput,
  string,
  string,
  string
] & {
  holder: string;
  projectId: BigNumber;
  currentFundingCycleConfiguration: BigNumber;
  projectTokenCount: BigNumber;
  reclaimedAmount: JBTokenAmountStructOutput;
  beneficiary: string;
  memo: string;
  metadata: string;
};

export type JBSplitStruct = {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumberish;
  projectId: BigNumberish;
  beneficiary: string;
  lockedUntil: BigNumberish;
  allocator: string;
};

export type JBSplitStructOutput = [
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumber;
  projectId: BigNumber;
  beneficiary: string;
  lockedUntil: BigNumber;
  allocator: string;
};

export type JBFeeStruct = {
  amount: BigNumberish;
  fee: BigNumberish;
  feeDiscount: BigNumberish;
  beneficiary: string;
};

export type JBFeeStructOutput = [BigNumber, number, number, string] & {
  amount: BigNumber;
  fee: number;
  feeDiscount: number;
  beneficiary: string;
};

export interface IJBPayoutRedemptionPaymentTerminalInterface
  extends utils.Interface {
  contractName: "IJBPayoutRedemptionPaymentTerminal";
  functions: {
    "acceptsToken(address,uint256)": FunctionFragment;
    "addToBalanceOf(uint256,uint256,address,string,bytes)": FunctionFragment;
    "baseWeightCurrency()": FunctionFragment;
    "currencyForToken(address)": FunctionFragment;
    "currentEthOverflowOf(uint256)": FunctionFragment;
    "decimalsForToken(address)": FunctionFragment;
    "directory()": FunctionFragment;
    "distributePayoutsOf(uint256,uint256,uint256,address,uint256,string)": FunctionFragment;
    "fee()": FunctionFragment;
    "feeGauge()": FunctionFragment;
    "heldFeesOf(uint256)": FunctionFragment;
    "isFeelessAddress(address)": FunctionFragment;
    "migrate(uint256,address)": FunctionFragment;
    "pay(uint256,uint256,address,address,uint256,bool,string,bytes)": FunctionFragment;
    "payoutSplitsGroup()": FunctionFragment;
    "prices()": FunctionFragment;
    "processFees(uint256)": FunctionFragment;
    "projects()": FunctionFragment;
    "redeemTokensOf(address,uint256,uint256,address,uint256,address,string,bytes)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setFeeGauge(address)": FunctionFragment;
    "setFeelessAddress(address,bool)": FunctionFragment;
    "splitsStore()": FunctionFragment;
    "store()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "useAllowanceOf(uint256,uint256,uint256,address,uint256,address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptsToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToBalanceOf",
    values: [BigNumberish, BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "baseWeightCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currencyForToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEthOverflowOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decimalsForToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "directory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributePayoutsOf",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeGauge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "heldFeesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFeelessAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      boolean,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutSplitsGroup",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "prices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "projects", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemTokensOf",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setFeeGauge", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeelessAddress",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "splitsStore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "useAllowanceOf",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseWeightCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEthOverflowOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decimalsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "directory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributePayoutsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeGauge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "heldFeesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFeelessAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutSplitsGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemTokensOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeelessAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitsStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useAllowanceOf",
    data: BytesLike
  ): Result;

  events: {
    "AddToBalance(uint256,uint256,uint256,string,bytes,address)": EventFragment;
    "DelegateDidPay(address,tuple,address)": EventFragment;
    "DelegateDidRedeem(address,tuple,address)": EventFragment;
    "DistributePayouts(uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,string,address)": EventFragment;
    "DistributeToPayoutSplit(uint256,uint256,uint256,tuple,uint256,address)": EventFragment;
    "HoldFee(uint256,uint256,uint256,uint256,address,address)": EventFragment;
    "Migrate(uint256,address,uint256,address)": EventFragment;
    "Pay(uint256,uint256,uint256,address,address,uint256,uint256,string,bytes,address)": EventFragment;
    "ProcessFee(uint256,uint256,bool,address,address)": EventFragment;
    "RedeemTokens(uint256,uint256,uint256,address,address,uint256,uint256,string,bytes,address)": EventFragment;
    "RefundHeldFees(uint256,uint256,uint256,uint256,address)": EventFragment;
    "SetFee(uint256,address)": EventFragment;
    "SetFeeGauge(address,address)": EventFragment;
    "SetFeelessAddress(address,bool,address)": EventFragment;
    "UseAllowance(uint256,uint256,uint256,address,uint256,uint256,uint256,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddToBalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateDidPay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateDidRedeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributePayouts"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeToPayoutSplit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Migrate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundHeldFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeGauge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeelessAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UseAllowance"): EventFragment;
}

export type AddToBalanceEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, string],
  {
    projectId: BigNumber;
    amount: BigNumber;
    refundedFees: BigNumber;
    memo: string;
    metadata: string;
    caller: string;
  }
>;

export type AddToBalanceEventFilter = TypedEventFilter<AddToBalanceEvent>;

export type DelegateDidPayEvent = TypedEvent<
  [string, JBDidPayDataStructOutput, string],
  { delegate: string; data: JBDidPayDataStructOutput; caller: string }
>;

export type DelegateDidPayEventFilter = TypedEventFilter<DelegateDidPayEvent>;

export type DelegateDidRedeemEvent = TypedEvent<
  [string, JBDidRedeemDataStructOutput, string],
  { delegate: string; data: JBDidRedeemDataStructOutput; caller: string }
>;

export type DelegateDidRedeemEventFilter =
  TypedEventFilter<DelegateDidRedeemEvent>;

export type DistributePayoutsEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  {
    fundingCycleConfiguration: BigNumber;
    fundingCycleNumber: BigNumber;
    projectId: BigNumber;
    beneficiary: string;
    amount: BigNumber;
    distributedAmount: BigNumber;
    fee: BigNumber;
    beneficiaryDistributionAmount: BigNumber;
    memo: string;
    caller: string;
  }
>;

export type DistributePayoutsEventFilter =
  TypedEventFilter<DistributePayoutsEvent>;

export type DistributeToPayoutSplitEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, JBSplitStructOutput, BigNumber, string],
  {
    projectId: BigNumber;
    domain: BigNumber;
    group: BigNumber;
    split: JBSplitStructOutput;
    amount: BigNumber;
    caller: string;
  }
>;

export type DistributeToPayoutSplitEventFilter =
  TypedEventFilter<DistributeToPayoutSplitEvent>;

export type HoldFeeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, string],
  {
    projectId: BigNumber;
    amount: BigNumber;
    fee: BigNumber;
    feeDiscount: BigNumber;
    beneficiary: string;
    caller: string;
  }
>;

export type HoldFeeEventFilter = TypedEventFilter<HoldFeeEvent>;

export type MigrateEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  { projectId: BigNumber; to: string; amount: BigNumber; caller: string }
>;

export type MigrateEventFilter = TypedEventFilter<MigrateEvent>;

export type PayEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ],
  {
    fundingCycleConfiguration: BigNumber;
    fundingCycleNumber: BigNumber;
    projectId: BigNumber;
    payer: string;
    beneficiary: string;
    amount: BigNumber;
    beneficiaryTokenCount: BigNumber;
    memo: string;
    metadata: string;
    caller: string;
  }
>;

export type PayEventFilter = TypedEventFilter<PayEvent>;

export type ProcessFeeEvent = TypedEvent<
  [BigNumber, BigNumber, boolean, string, string],
  {
    projectId: BigNumber;
    amount: BigNumber;
    wasHeld: boolean;
    beneficiary: string;
    caller: string;
  }
>;

export type ProcessFeeEventFilter = TypedEventFilter<ProcessFeeEvent>;

export type RedeemTokensEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ],
  {
    fundingCycleConfiguration: BigNumber;
    fundingCycleNumber: BigNumber;
    projectId: BigNumber;
    holder: string;
    beneficiary: string;
    tokenCount: BigNumber;
    reclaimedAmount: BigNumber;
    memo: string;
    metadata: string;
    caller: string;
  }
>;

export type RedeemTokensEventFilter = TypedEventFilter<RedeemTokensEvent>;

export type RefundHeldFeesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  {
    projectId: BigNumber;
    amount: BigNumber;
    refundedFees: BigNumber;
    leftoverAmount: BigNumber;
    caller: string;
  }
>;

export type RefundHeldFeesEventFilter = TypedEventFilter<RefundHeldFeesEvent>;

export type SetFeeEvent = TypedEvent<
  [BigNumber, string],
  { fee: BigNumber; caller: string }
>;

export type SetFeeEventFilter = TypedEventFilter<SetFeeEvent>;

export type SetFeeGaugeEvent = TypedEvent<
  [string, string],
  { feeGauge: string; caller: string }
>;

export type SetFeeGaugeEventFilter = TypedEventFilter<SetFeeGaugeEvent>;

export type SetFeelessAddressEvent = TypedEvent<
  [string, boolean, string],
  { addrs: string; flag: boolean; caller: string }
>;

export type SetFeelessAddressEventFilter =
  TypedEventFilter<SetFeelessAddressEvent>;

export type UseAllowanceEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  {
    fundingCycleConfiguration: BigNumber;
    fundingCycleNumber: BigNumber;
    projectId: BigNumber;
    beneficiary: string;
    amount: BigNumber;
    distributedAmount: BigNumber;
    netDistributedamount: BigNumber;
    memo: string;
    caller: string;
  }
>;

export type UseAllowanceEventFilter = TypedEventFilter<UseAllowanceEvent>;

export interface IJBPayoutRedemptionPaymentTerminal extends BaseContract {
  contractName: "IJBPayoutRedemptionPaymentTerminal";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IJBPayoutRedemptionPaymentTerminalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptsToken(
      _token: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addToBalanceOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    baseWeightCurrency(overrides?: CallOverrides): Promise<[BigNumber]>;

    currencyForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentEthOverflowOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimalsForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    directory(overrides?: CallOverrides): Promise<[string]>;

    distributePayoutsOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _memo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeGauge(overrides?: CallOverrides): Promise<[string]>;

    heldFeesOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[JBFeeStructOutput[]]>;

    isFeelessAddress(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pay(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _beneficiary: string,
      _minReturnedTokens: BigNumberish,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payoutSplitsGroup(overrides?: CallOverrides): Promise<[BigNumber]>;

    prices(overrides?: CallOverrides): Promise<[string]>;

    processFees(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    projects(overrides?: CallOverrides): Promise<[string]>;

    redeemTokensOf(
      _holder: string,
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeGauge(
      _feeGauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeelessAddress(
      _contract: string,
      _flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    splitsStore(overrides?: CallOverrides): Promise<[string]>;

    store(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    useAllowanceOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptsToken(
    _token: string,
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addToBalanceOf(
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    _memo: string,
    _metadata: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  baseWeightCurrency(overrides?: CallOverrides): Promise<BigNumber>;

  currencyForToken(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentEthOverflowOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimalsForToken(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  directory(overrides?: CallOverrides): Promise<string>;

  distributePayoutsOf(
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _currency: BigNumberish,
    _token: string,
    _minReturnedTokens: BigNumberish,
    _memo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feeGauge(overrides?: CallOverrides): Promise<string>;

  heldFeesOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<JBFeeStructOutput[]>;

  isFeelessAddress(
    _contract: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  migrate(
    _projectId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pay(
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    _beneficiary: string,
    _minReturnedTokens: BigNumberish,
    _preferClaimedTokens: boolean,
    _memo: string,
    _metadata: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payoutSplitsGroup(overrides?: CallOverrides): Promise<BigNumber>;

  prices(overrides?: CallOverrides): Promise<string>;

  processFees(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  projects(overrides?: CallOverrides): Promise<string>;

  redeemTokensOf(
    _holder: string,
    _projectId: BigNumberish,
    _tokenCount: BigNumberish,
    _token: string,
    _minReturnedTokens: BigNumberish,
    _beneficiary: string,
    _memo: string,
    _metadata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeGauge(
    _feeGauge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeelessAddress(
    _contract: string,
    _flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  splitsStore(overrides?: CallOverrides): Promise<string>;

  store(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  useAllowanceOf(
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _currency: BigNumberish,
    _token: string,
    _minReturnedTokens: BigNumberish,
    _beneficiary: string,
    _memo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptsToken(
      _token: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addToBalanceOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    baseWeightCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    currencyForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEthOverflowOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimalsForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    directory(overrides?: CallOverrides): Promise<string>;

    distributePayoutsOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _memo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeGauge(overrides?: CallOverrides): Promise<string>;

    heldFeesOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<JBFeeStructOutput[]>;

    isFeelessAddress(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pay(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _beneficiary: string,
      _minReturnedTokens: BigNumberish,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutSplitsGroup(overrides?: CallOverrides): Promise<BigNumber>;

    prices(overrides?: CallOverrides): Promise<string>;

    processFees(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    projects(overrides?: CallOverrides): Promise<string>;

    redeemTokensOf(
      _holder: string,
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeGauge(_feeGauge: string, overrides?: CallOverrides): Promise<void>;

    setFeelessAddress(
      _contract: string,
      _flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    splitsStore(overrides?: CallOverrides): Promise<string>;

    store(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    useAllowanceOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddToBalance(uint256,uint256,uint256,string,bytes,address)"(
      projectId?: BigNumberish | null,
      amount?: null,
      refundedFees?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): AddToBalanceEventFilter;
    AddToBalance(
      projectId?: BigNumberish | null,
      amount?: null,
      refundedFees?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): AddToBalanceEventFilter;

    "DelegateDidPay(address,tuple,address)"(
      delegate?: string | null,
      data?: null,
      caller?: null
    ): DelegateDidPayEventFilter;
    DelegateDidPay(
      delegate?: string | null,
      data?: null,
      caller?: null
    ): DelegateDidPayEventFilter;

    "DelegateDidRedeem(address,tuple,address)"(
      delegate?: string | null,
      data?: null,
      caller?: null
    ): DelegateDidRedeemEventFilter;
    DelegateDidRedeem(
      delegate?: string | null,
      data?: null,
      caller?: null
    ): DelegateDidRedeemEventFilter;

    "DistributePayouts(uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,string,address)"(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: null,
      amount?: null,
      distributedAmount?: null,
      fee?: null,
      beneficiaryDistributionAmount?: null,
      memo?: null,
      caller?: null
    ): DistributePayoutsEventFilter;
    DistributePayouts(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: null,
      amount?: null,
      distributedAmount?: null,
      fee?: null,
      beneficiaryDistributionAmount?: null,
      memo?: null,
      caller?: null
    ): DistributePayoutsEventFilter;

    "DistributeToPayoutSplit(uint256,uint256,uint256,tuple,uint256,address)"(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      split?: null,
      amount?: null,
      caller?: null
    ): DistributeToPayoutSplitEventFilter;
    DistributeToPayoutSplit(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      split?: null,
      amount?: null,
      caller?: null
    ): DistributeToPayoutSplitEventFilter;

    "HoldFee(uint256,uint256,uint256,uint256,address,address)"(
      projectId?: BigNumberish | null,
      amount?: BigNumberish | null,
      fee?: BigNumberish | null,
      feeDiscount?: null,
      beneficiary?: null,
      caller?: null
    ): HoldFeeEventFilter;
    HoldFee(
      projectId?: BigNumberish | null,
      amount?: BigNumberish | null,
      fee?: BigNumberish | null,
      feeDiscount?: null,
      beneficiary?: null,
      caller?: null
    ): HoldFeeEventFilter;

    "Migrate(uint256,address,uint256,address)"(
      projectId?: BigNumberish | null,
      to?: string | null,
      amount?: null,
      caller?: null
    ): MigrateEventFilter;
    Migrate(
      projectId?: BigNumberish | null,
      to?: string | null,
      amount?: null,
      caller?: null
    ): MigrateEventFilter;

    "Pay(uint256,uint256,uint256,address,address,uint256,uint256,string,bytes,address)"(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      payer?: null,
      beneficiary?: null,
      amount?: null,
      beneficiaryTokenCount?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): PayEventFilter;
    Pay(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      payer?: null,
      beneficiary?: null,
      amount?: null,
      beneficiaryTokenCount?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): PayEventFilter;

    "ProcessFee(uint256,uint256,bool,address,address)"(
      projectId?: BigNumberish | null,
      amount?: BigNumberish | null,
      wasHeld?: boolean | null,
      beneficiary?: null,
      caller?: null
    ): ProcessFeeEventFilter;
    ProcessFee(
      projectId?: BigNumberish | null,
      amount?: BigNumberish | null,
      wasHeld?: boolean | null,
      beneficiary?: null,
      caller?: null
    ): ProcessFeeEventFilter;

    "RedeemTokens(uint256,uint256,uint256,address,address,uint256,uint256,string,bytes,address)"(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      holder?: null,
      beneficiary?: null,
      tokenCount?: null,
      reclaimedAmount?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): RedeemTokensEventFilter;
    RedeemTokens(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      holder?: null,
      beneficiary?: null,
      tokenCount?: null,
      reclaimedAmount?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): RedeemTokensEventFilter;

    "RefundHeldFees(uint256,uint256,uint256,uint256,address)"(
      projectId?: BigNumberish | null,
      amount?: BigNumberish | null,
      refundedFees?: BigNumberish | null,
      leftoverAmount?: null,
      caller?: null
    ): RefundHeldFeesEventFilter;
    RefundHeldFees(
      projectId?: BigNumberish | null,
      amount?: BigNumberish | null,
      refundedFees?: BigNumberish | null,
      leftoverAmount?: null,
      caller?: null
    ): RefundHeldFeesEventFilter;

    "SetFee(uint256,address)"(fee?: null, caller?: null): SetFeeEventFilter;
    SetFee(fee?: null, caller?: null): SetFeeEventFilter;

    "SetFeeGauge(address,address)"(
      feeGauge?: string | null,
      caller?: null
    ): SetFeeGaugeEventFilter;
    SetFeeGauge(
      feeGauge?: string | null,
      caller?: null
    ): SetFeeGaugeEventFilter;

    "SetFeelessAddress(address,bool,address)"(
      addrs?: string | null,
      flag?: boolean | null,
      caller?: null
    ): SetFeelessAddressEventFilter;
    SetFeelessAddress(
      addrs?: string | null,
      flag?: boolean | null,
      caller?: null
    ): SetFeelessAddressEventFilter;

    "UseAllowance(uint256,uint256,uint256,address,uint256,uint256,uint256,string,address)"(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: null,
      amount?: null,
      distributedAmount?: null,
      netDistributedamount?: null,
      memo?: null,
      caller?: null
    ): UseAllowanceEventFilter;
    UseAllowance(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: null,
      amount?: null,
      distributedAmount?: null,
      netDistributedamount?: null,
      memo?: null,
      caller?: null
    ): UseAllowanceEventFilter;
  };

  estimateGas: {
    acceptsToken(
      _token: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addToBalanceOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    baseWeightCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    currencyForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEthOverflowOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimalsForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    directory(overrides?: CallOverrides): Promise<BigNumber>;

    distributePayoutsOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _memo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeGauge(overrides?: CallOverrides): Promise<BigNumber>;

    heldFeesOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFeelessAddress(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pay(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _beneficiary: string,
      _minReturnedTokens: BigNumberish,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payoutSplitsGroup(overrides?: CallOverrides): Promise<BigNumber>;

    prices(overrides?: CallOverrides): Promise<BigNumber>;

    processFees(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    projects(overrides?: CallOverrides): Promise<BigNumber>;

    redeemTokensOf(
      _holder: string,
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeGauge(
      _feeGauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeelessAddress(
      _contract: string,
      _flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    splitsStore(overrides?: CallOverrides): Promise<BigNumber>;

    store(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    useAllowanceOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptsToken(
      _token: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToBalanceOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    baseWeightCurrency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currencyForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEthOverflowOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimalsForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    directory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributePayoutsOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _memo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGauge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    heldFeesOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFeelessAddress(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pay(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _beneficiary: string,
      _minReturnedTokens: BigNumberish,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payoutSplitsGroup(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processFees(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    projects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemTokensOf(
      _holder: string,
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeGauge(
      _feeGauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeelessAddress(
      _contract: string,
      _flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    splitsStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    store(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    useAllowanceOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
